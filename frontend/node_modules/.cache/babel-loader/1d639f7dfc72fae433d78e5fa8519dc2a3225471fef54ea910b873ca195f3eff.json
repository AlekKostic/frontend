{"ast":null,"code":"var _jsxFileName = \"/home/alek/react-net/frontend/src/Components/IncomeStatement/IncomeStatement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getIncomeStatement } from '../../api';\nimport Table from '../Table/Table';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeMonetaryNumber, formatRatio } from '../../Helpers/NumberFormating';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst configs = [{\n  label: \"Date\",\n  render: company => company.date\n}, {\n  label: \"Revenue\",\n  render: company => formatLargeMonetaryNumber(company.revenue)\n}, {\n  label: \"Cost Of Revenue\",\n  render: company => formatLargeMonetaryNumber(company.costOfRevenue)\n}, {\n  label: \"Depreciation\",\n  render: company => formatLargeMonetaryNumber(company.depreciationAndAmortization)\n}, {\n  label: \"Operating Income\",\n  render: company => formatLargeMonetaryNumber(company.operatingIncome)\n}, {\n  label: \"Income Before Taxes\",\n  render: company => formatLargeMonetaryNumber(company.incomeBeforeTax)\n}, {\n  label: \"Net Income\",\n  render: company => formatLargeMonetaryNumber(company.netIncome)\n}, {\n  label: \"Net Income Ratio\",\n  render: company => formatRatio(company.netIncomeRatio)\n}, {\n  label: \"Earnings Per Share\",\n  render: company => formatRatio(company.eps)\n}, {\n  label: \"Earnings Per Diluted\",\n  render: company => formatRatio(company.epsdiluted)\n}, {\n  label: \"Gross Profit Ratio\",\n  render: company => formatRatio(company.grossProfitRatio)\n}, {\n  label: \"Opearting Income Ratio\",\n  render: company => formatRatio(company.operatingIncomeRatio)\n}, {\n  label: \"Income Before Taxes Ratio\",\n  render: company => formatRatio(company.incomeBeforeTaxRatio)\n}];\nconst IncomeStatement = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [incomeStatement, setIncomeStatement] = useState();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result.data);\n    };\n    incomeStatementFetch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: incomeStatement ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        config: configs,\n        data: incomeStatement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 27\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 85\n    }, this)\n  }, void 0, false);\n};\n_s(IncomeStatement, \"EWkRNnPJ/dbjI8Gcx0h5nwXmoyA=\", false, function () {\n  return [useOutletContext];\n});\n_c = IncomeStatement;\nexport default IncomeStatement;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatement\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getIncomeStatement","Table","Spinner","formatLargeMonetaryNumber","formatRatio","jsxDEV","_jsxDEV","Fragment","_Fragment","configs","label","render","company","date","revenue","costOfRevenue","depreciationAndAmortization","operatingIncome","incomeBeforeTax","netIncome","netIncomeRatio","eps","epsdiluted","grossProfitRatio","operatingIncomeRatio","incomeBeforeTaxRatio","IncomeStatement","props","_s","ticker","incomeStatement","setIncomeStatement","incomeStatementFetch","result","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alek/react-net/frontend/src/Components/IncomeStatement/IncomeStatement.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CompanyIncomeStatement } from '../../company';\nimport { useOutletContext } from 'react-router-dom';\nimport { getIncomeStatement } from '../../api';\nimport Table from '../Table/Table';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeMonetaryNumber, formatRatio } from '../../Helpers/NumberFormating';\n\ninterface Props {}\n\nconst configs = [\n  {\n    label: \"Date\",\n    render: (company: CompanyIncomeStatement) => company.date,\n  },\n  {\n    label: \"Revenue\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.revenue),\n  },\n  {\n    label: \"Cost Of Revenue\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.costOfRevenue),\n  },\n  {\n    label: \"Depreciation\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.depreciationAndAmortization),\n  },\n  {\n    label: \"Operating Income\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.operatingIncome),\n  },\n  {\n    label: \"Income Before Taxes\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.incomeBeforeTax),\n  },\n  {\n    label: \"Net Income\",\n    render: (company: CompanyIncomeStatement) =>\n      formatLargeMonetaryNumber(company.netIncome),\n  },\n  {\n    label: \"Net Income Ratio\",\n    render: (company: CompanyIncomeStatement) =>\n      formatRatio(company.netIncomeRatio),\n  },\n  {\n    label: \"Earnings Per Share\",\n    render: (company: CompanyIncomeStatement) => formatRatio(company.eps),\n  },\n  {\n    label: \"Earnings Per Diluted\",\n    render: (company: CompanyIncomeStatement) =>\n      formatRatio(company.epsdiluted),\n  },\n  {\n    label: \"Gross Profit Ratio\",\n    render: (company: CompanyIncomeStatement) =>\n      formatRatio(company.grossProfitRatio),\n  },\n  {\n    label: \"Opearting Income Ratio\",\n    render: (company: CompanyIncomeStatement) =>\n      formatRatio(company.operatingIncomeRatio),\n  },\n  {\n    label: \"Income Before Taxes Ratio\",\n    render: (company: CompanyIncomeStatement) =>\n      formatRatio(company.incomeBeforeTaxRatio),\n  },\n];\n\nconst IncomeStatement = (props: Props) => {\n  const ticker = useOutletContext<string>();\n  const [incomeStatement, setIncomeStatement] = useState<CompanyIncomeStatement[]>();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result!.data)\n    };\n    incomeStatementFetch();\n  }, [])\n  return <>\n    {incomeStatement ? (<><Table config={configs} data = {incomeStatement}/></>) : (<Spinner />)}\n  </>\n}\n\nexport default IncomeStatement"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}