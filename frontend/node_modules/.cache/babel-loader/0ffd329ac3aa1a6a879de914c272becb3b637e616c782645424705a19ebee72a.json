{"ast":null,"code":"var _jsxFileName = \"/home/alek/react-net/frontend/src/Components/IncomeStatement/IncomeStatement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getIncomeStatement } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configs = [{\n  label: \"Date\",\n  render: company => company.date\n}, {\n  label: \"Revenue\",\n  render: company => company.revenue\n}, {\n  label: \"Cost Of Revenue\",\n  render: company => company.costOfRevenue\n}, {\n  label: \"Depreciation\",\n  render: company => company.depreciationAndAmortization\n}, {\n  label: \"Operating Income\",\n  render: company => company.operatingIncome\n}, {\n  label: \"Income Before Taxes\",\n  render: company => company.incomeBeforeTax\n}, {\n  label: \"Net Income\",\n  render: company => company.netIncome\n}, {\n  label: \"Net Income Ratio\",\n  render: company => company.netIncomeRatio\n}, {\n  label: \"Earnings Per Share\",\n  render: company => company.eps\n}, {\n  label: \"Earnings Per Diluted\",\n  render: company => company.epsdiluted\n}, {\n  label: \"Gross Profit Ratio\",\n  render: company => company.grossProfitRatio\n}, {\n  label: \"Opearting Income Ratio\",\n  render: company => company.operatingIncomeRatio\n}, {\n  label: \"Income Before Taxes Ratio\",\n  render: company => company.incomeBeforeTaxRatio\n}];\nconst IncomeStatement = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [incomeStatement, setIncomeStatement] = useState();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result.data);\n    };\n    inco;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"IncomeStatement\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(IncomeStatement, \"EWkRNnPJ/dbjI8Gcx0h5nwXmoyA=\", false, function () {\n  return [useOutletContext];\n});\n_c = IncomeStatement;\nexport default IncomeStatement;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatement\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getIncomeStatement","jsxDEV","_jsxDEV","configs","label","render","company","date","revenue","costOfRevenue","depreciationAndAmortization","operatingIncome","incomeBeforeTax","netIncome","netIncomeRatio","eps","epsdiluted","grossProfitRatio","operatingIncomeRatio","incomeBeforeTaxRatio","IncomeStatement","props","_s","ticker","incomeStatement","setIncomeStatement","incomeStatementFetch","result","data","inco","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alek/react-net/frontend/src/Components/IncomeStatement/IncomeStatement.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CompanyIncomeStatement } from '../../company';\nimport { useOutletContext } from 'react-router-dom';\nimport { getIncomeStatement } from '../../api';\n\ninterface Props {}\n\nconst configs = [\n  {\n    label: \"Date\",\n    render: (company: CompanyIncomeStatement) => company.date,\n  },\n  {\n    label: \"Revenue\",\n    render: (company: CompanyIncomeStatement) => company.revenue,\n  },\n  {\n    label: \"Cost Of Revenue\",\n    render: (company: CompanyIncomeStatement) => company.costOfRevenue,\n  },\n  {\n    label: \"Depreciation\",\n    render: (company: CompanyIncomeStatement) =>\n      company.depreciationAndAmortization,\n  },\n  {\n    label: \"Operating Income\",\n    render: (company: CompanyIncomeStatement) => company.operatingIncome,\n  },\n  {\n    label: \"Income Before Taxes\",\n    render: (company: CompanyIncomeStatement) => company.incomeBeforeTax,\n  },\n  {\n    label: \"Net Income\",\n    render: (company: CompanyIncomeStatement) => company.netIncome,\n  },\n  {\n    label: \"Net Income Ratio\",\n    render: (company: CompanyIncomeStatement) => company.netIncomeRatio,\n  },\n  {\n    label: \"Earnings Per Share\",\n    render: (company: CompanyIncomeStatement) => company.eps,\n  },\n  {\n    label: \"Earnings Per Diluted\",\n    render: (company: CompanyIncomeStatement) => company.epsdiluted,\n  },\n  {\n    label: \"Gross Profit Ratio\",\n    render: (company: CompanyIncomeStatement) => company.grossProfitRatio,\n  },\n  {\n    label: \"Opearting Income Ratio\",\n    render: (company: CompanyIncomeStatement) => company.operatingIncomeRatio,\n  },\n  {\n    label: \"Income Before Taxes Ratio\",\n    render: (company: CompanyIncomeStatement) => company.incomeBeforeTaxRatio,\n  },\n];\n\nconst IncomeStatement = (props: Props) => {\n  const ticker = useOutletContext<string>();\n  const [incomeStatement, setIncomeStatement] = useState<CompanyIncomeStatement[]>();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result!.data)\n    };\n    inco\n  }, [])\n  return (\n    <div>IncomeStatement</div>\n  )\n}\n\nexport default IncomeStatement"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,kBAAkB,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI/C,MAAMC,OAAO,GAAG,CACd;EACEC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACC;AACvD,CAAC,EACD;EACEH,KAAK,EAAE,SAAS;EAChBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACE;AACvD,CAAC,EACD;EACEJ,KAAK,EAAE,iBAAiB;EACxBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACG;AACvD,CAAC,EACD;EACEL,KAAK,EAAE,cAAc;EACrBC,MAAM,EAAGC,OAA+B,IACtCA,OAAO,CAACI;AACZ,CAAC,EACD;EACEN,KAAK,EAAE,kBAAkB;EACzBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACK;AACvD,CAAC,EACD;EACEP,KAAK,EAAE,qBAAqB;EAC5BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACM;AACvD,CAAC,EACD;EACER,KAAK,EAAE,YAAY;EACnBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACO;AACvD,CAAC,EACD;EACET,KAAK,EAAE,kBAAkB;EACzBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACQ;AACvD,CAAC,EACD;EACEV,KAAK,EAAE,oBAAoB;EAC3BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACS;AACvD,CAAC,EACD;EACEX,KAAK,EAAE,sBAAsB;EAC7BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACU;AACvD,CAAC,EACD;EACEZ,KAAK,EAAE,oBAAoB;EAC3BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACW;AACvD,CAAC,EACD;EACEb,KAAK,EAAE,wBAAwB;EAC/BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACY;AACvD,CAAC,EACD;EACEd,KAAK,EAAE,2BAA2B;EAClCC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACa;AACvD,CAAC,CACF;AAED,MAAMC,eAAe,GAAIC,KAAY,IAAK;EAAAC,EAAA;EACxC,MAAMC,MAAM,GAAGxB,gBAAgB,CAAS,CAAC;EACzC,MAAM,CAACyB,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAA2B,CAAC;EAClFD,SAAS,CAAC,MAAM;IACd,MAAM6B,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,MAAMC,MAAM,GAAG,MAAM3B,kBAAkB,CAACuB,MAAM,CAAC;MAC/CE,kBAAkB,CAACE,MAAM,CAAEC,IAAI,CAAC;IAClC,CAAC;IACDC,IAAI;EACN,CAAC,EAAE,EAAE,CAAC;EACN,oBACE3B,OAAA;IAAA4B,QAAA,EAAK;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE9B,CAAC;AAAAZ,EAAA,CAbKF,eAAe;EAAA,QACJrB,gBAAgB;AAAA;AAAAoC,EAAA,GAD3Bf,eAAe;AAerB,eAAeA,eAAe;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}