{"ast":null,"code":"var _jsxFileName = \"/home/alek/react-net/frontend/src/Components/BalanceSheet/BalanceSheet.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getBalanceSheet } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeMonetaryNumber } from '../../Helpers/NumberFormating';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = [{\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Assets\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalAssets)\n}, {\n  label: \"Current Assets\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentAssets)\n}, {\n  label: \"Total Cash\",\n  render: company => formatLargeMonetaryNumber(company.cashAndCashEquivalents)\n}, {\n  label: \"Property & equipment\",\n  render: company => formatLargeMonetaryNumber(company.propertyPlantEquipmentNet)\n}, {\n  label: \"Intangible Assets\",\n  render: company => formatLargeMonetaryNumber(company.intangibleAssets)\n}, {\n  label: \"Long Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Total Debt\",\n  render: company => formatLargeMonetaryNumber(company.otherCurrentLiabilities)\n}, {\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Liabilites\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalLiabilities)\n}, {\n  label: \"Current Liabilities\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentLiabilities)\n}, {\n  label: \"Long-Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Long-Term Income Taxes\",\n  render: company => formatLargeMonetaryNumber(company.otherLiabilities)\n}, {\n  label: \"Stakeholder's Equity\",\n  render: company => formatLargeMonetaryNumber(company.totalStockholdersEquity)\n}, {\n  label: \"Retained Earnings\",\n  render: company => formatLargeMonetaryNumber(company.retainedEarnings)\n}];\nconst BalanceSheet = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [balanceSheet, setBalanceSheet] = useState();\n  useEffect(() => {\n    const getData = async () => {\n      const value = await getBalanceSheet(ticker);\n      setBalanceSheet(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: balanceSheet ? /*#__PURE__*/_jsxDEV(RatioList, {\n      config: config,\n      data: balanceSheet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(BalanceSheet, \"ERJd7Ry5aqlvEGIGW73IDAoaXMc=\", false, function () {\n  return [useOutletContext];\n});\n_c = BalanceSheet;\nexport default BalanceSheet;\nvar _c;\n$RefreshReg$(_c, \"BalanceSheet\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getBalanceSheet","RatioList","Spinner","formatLargeMonetaryNumber","jsxDEV","_jsxDEV","Fragment","_Fragment","config","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","render","company","totalAssets","totalCurrentAssets","cashAndCashEquivalents","propertyPlantEquipmentNet","intangibleAssets","longTermDebt","otherCurrentLiabilities","totalLiabilities","totalCurrentLiabilities","otherLiabilities","totalStockholdersEquity","retainedEarnings","BalanceSheet","props","_s","ticker","balanceSheet","setBalanceSheet","getData","value","data","_c","$RefreshReg$"],"sources":["/home/alek/react-net/frontend/src/Components/BalanceSheet/BalanceSheet.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CompanyBalanceSheet } from '../../company';\nimport { useOutletContext } from 'react-router-dom';\nimport { getBalanceSheet } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeMonetaryNumber } from '../../Helpers/NumberFormating';\n\ntype Props = {}\n\nconst config = [\n  {\n    label: <div className=\"font-bold\">Total Assets</div>,\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.totalAssets),\n  },\n  {\n    label: \"Current Assets\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.totalCurrentAssets),\n  },\n  {\n    label: \"Total Cash\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.cashAndCashEquivalents),\n  },\n  {\n    label: \"Property & equipment\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.propertyPlantEquipmentNet),\n  },\n  {\n    label: \"Intangible Assets\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.intangibleAssets),\n  },\n  {\n    label: \"Long Term Debt\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.longTermDebt),\n  },\n  {\n    label: \"Total Debt\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.otherCurrentLiabilities),\n  },\n  {\n    label: <div className=\"font-bold\">Total Liabilites</div>,\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.totalLiabilities),\n  },\n  {\n    label: \"Current Liabilities\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.totalCurrentLiabilities),\n  },\n  {\n    label: \"Long-Term Debt\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.longTermDebt),\n  },\n  {\n    label: \"Long-Term Income Taxes\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.otherLiabilities),\n  },\n  {\n    label: \"Stakeholder's Equity\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.totalStockholdersEquity),\n  },\n  {\n    label: \"Retained Earnings\",\n    render: (company: CompanyBalanceSheet) =>\n      formatLargeMonetaryNumber(company.retainedEarnings),\n  },\n];\n\nconst BalanceSheet = (props: Props) => {\n  const ticker = useOutletContext<string>();\n  const [balanceSheet, setBalanceSheet] = useState<CompanyBalanceSheet>();\n  useEffect(() => {\n    const getData = async () => {\n      const value = await getBalanceSheet(ticker!);\n      setBalanceSheet(value?.data[0])\n    }\n    getData();\n  }, [])\n  return <>\n    {balanceSheet ? (\n      <RatioList config={config} data={balanceSheet} />\n    ): (\n      <Spinner />\n    )}\n  </>\n}\n\nexport default BalanceSheet"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}