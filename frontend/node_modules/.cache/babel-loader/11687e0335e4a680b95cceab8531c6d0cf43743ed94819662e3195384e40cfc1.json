{"ast":null,"code":"var _jsxFileName = \"/home/alek/react-net/frontend/src/Components/CompanyProfile/CompanyProfile.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getKeyMetrics } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeNonMonetaryNumber, formatRatio } from '../../Helpers/NumberFormating';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\nconst tableConfig = [{\n  label: \"Market Cap\",\n  render: company => formatLargeNonMonetaryNumber(company.marketCapTTM),\n  subTitle: \"Total value of all a company's shares of stock\"\n}, {\n  label: \"Current Ratio\",\n  render: company => formatRatio(company.currentRatioTTM),\n  subTitle: \"Measures the companies ability to pay short term debt obligations\"\n}, {\n  label: \"Return On Equity\",\n  render: company => formatRatio(company.roeTTM),\n  subTitle: \"Return on equity is the measure of a company's net income divided by its shareholder's equity\"\n}, {\n  label: \"Return On Assets\",\n  render: company => formatRatio(company.returnOnTangibleAssetsTTM),\n  subTitle: \"Return on assets is the measure of how effective a company is using its assets\"\n}, {\n  label: \"Free Cashflow Per Share\",\n  render: company => formatRatio(company.freeCashFlowPerShareTTM),\n  subTitle: \"Return on assets is the measure of how effective a company is using its assets\"\n}, {\n  label: \"Book Value Per Share TTM\",\n  render: company => formatRatio(company.bookValuePerShareTTM),\n  subTitle: \"Book value per share indicates a firm's net asset value (total assets - total liabilities) on per share basis\"\n}, {\n  label: \"Divdend Yield TTM\",\n  render: company => formatRatio(company.dividendYieldTTM),\n  subTitle: \"Shows how much a company pays each year relative to stock price\"\n}, {\n  label: \"Capex Per Share TTM\",\n  render: company => formatRatio(company.capexPerShareTTM),\n  subTitle: \"Capex is used by a company to aquire, upgrade, and maintain physical assets\"\n}, {\n  label: \"Graham Number\",\n  render: company => formatRatio(company.grahamNumberTTM),\n  subTitle: \"This is the upperbouind of the price range that a defensive investor should pay for a stock\"\n}, {\n  label: \"PE Ratio\",\n  render: company => formatRatio(company.peRatioTTM),\n  subTitle: \"This is the upperbouind of the price range that a defensive investor should pay for a stock\"\n}];\nconst CompanyProfile = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [companyData, setCompanyData] = useState();\n  useEffect(() => {\n    const getCompanyKeyMetrics = async () => {\n      const value = await getKeyMetrics(ticker);\n      setCompanyData(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getCompanyKeyMetrics();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: companyData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(RatioList, {\n        data: companyData,\n        config: tableConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(CompanyProfile, \"oIWvfb9RHbVWP9I9E1ZAfgq5EdY=\", false, function () {\n  return [useOutletContext];\n});\n_c = CompanyProfile;\nexport default CompanyProfile;\nvar _c;\n$RefreshReg$(_c, \"CompanyProfile\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getKeyMetrics","RatioList","Spinner","formatLargeNonMonetaryNumber","formatRatio","jsxDEV","_jsxDEV","Fragment","_Fragment","tableConfig","label","render","company","marketCapTTM","subTitle","currentRatioTTM","roeTTM","returnOnTangibleAssetsTTM","freeCashFlowPerShareTTM","bookValuePerShareTTM","dividendYieldTTM","capexPerShareTTM","grahamNumberTTM","peRatioTTM","CompanyProfile","props","_s","ticker","companyData","setCompanyData","getCompanyKeyMetrics","value","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alek/react-net/frontend/src/Components/CompanyProfile/CompanyProfile.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CompanyKeyMetrics } from '../../company';\nimport { useOutletContext } from 'react-router-dom';\nimport { getKeyMetrics } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinner/Spinner';\nimport { formatLargeNonMonetaryNumber, formatRatio } from '../../Helpers/NumberFormating';\n\ninterface Props  {};\n\nconst tableConfig = [\n  {\n    label: \"Market Cap\",\n    render: (company: CompanyKeyMetrics) =>\n      formatLargeNonMonetaryNumber(company.marketCapTTM),\n    subTitle: \"Total value of all a company's shares of stock\",\n  },\n  {\n    label: \"Current Ratio\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.currentRatioTTM),\n    subTitle:\n      \"Measures the companies ability to pay short term debt obligations\",\n  },\n  {\n    label: \"Return On Equity\",\n    render: (company: CompanyKeyMetrics) => formatRatio(company.roeTTM),\n    subTitle:\n      \"Return on equity is the measure of a company's net income divided by its shareholder's equity\",\n  },\n  {\n    label: \"Return On Assets\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.returnOnTangibleAssetsTTM),\n    subTitle:\n      \"Return on assets is the measure of how effective a company is using its assets\",\n  },\n  {\n    label: \"Free Cashflow Per Share\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.freeCashFlowPerShareTTM),\n    subTitle:\n      \"Return on assets is the measure of how effective a company is using its assets\",\n  },\n  {\n    label: \"Book Value Per Share TTM\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.bookValuePerShareTTM),\n    subTitle:\n      \"Book value per share indicates a firm's net asset value (total assets - total liabilities) on per share basis\",\n  },\n  {\n    label: \"Divdend Yield TTM\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.dividendYieldTTM),\n    subTitle: \"Shows how much a company pays each year relative to stock price\",\n  },\n  {\n    label: \"Capex Per Share TTM\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.capexPerShareTTM),\n    subTitle:\n      \"Capex is used by a company to aquire, upgrade, and maintain physical assets\",\n  },\n  {\n    label: \"Graham Number\",\n    render: (company: CompanyKeyMetrics) =>\n      formatRatio(company.grahamNumberTTM),\n    subTitle:\n      \"This is the upperbouind of the price range that a defensive investor should pay for a stock\",\n  },\n  {\n    label: \"PE Ratio\",\n    render: (company: CompanyKeyMetrics) => formatRatio(company.peRatioTTM),\n    subTitle:\n      \"This is the upperbouind of the price range that a defensive investor should pay for a stock\",\n  },\n];\n\nconst CompanyProfile = (props: Props) => {\n  const ticker= useOutletContext<string>();\n  const [companyData, setCompanyData] = useState<CompanyKeyMetrics>();\n  useEffect(()=>{\n    const getCompanyKeyMetrics = async() => {\n      const value = await getKeyMetrics(ticker);\n      setCompanyData(value?.data[0]);\n    }\n    getCompanyKeyMetrics();\n  }, []);\n  return <>\n    {companyData ? (\n      <><RatioList data={companyData} config={tableConfig} />\n      </>\n    ) : (\n      <Spinner />\n    )}\n  </>\n}\n\nexport default CompanyProfile"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}